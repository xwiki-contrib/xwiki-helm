apiVersion: v1
kind: Secret
metadata:
  name: {{ (include "xwiki.initScripts" .) }}
  labels:
    {{- include "xwiki.labels" . | nindent 4 }}
  annotations:
    {{- if .Values.commonAnnotations }}
    {{ .Values.commonAnnotations | toYaml | indent 4 }}
    {{- end }}
stringData:
  entrypoint: |
    #!/bin/bash
    ##
    # *Experimental* solution for custom properties.
    # With time we are looking other alternatives to setup this custom values.
    ##
    # Always execute "first_start" in order to get all new values keys from future versions.
    rm -f /usr/local/xwiki/data/xwiki.cfg
    rm -f /usr/local/xwiki/data/xwiki.properties
    rm -f /usr/local/xwiki/data/hibernate.cfg.xml

    # Reuse commands/resources from default entrypoint.
    source /usr/local/bin/docker-entrypoint.sh
    file_env 'CONTEXT_PATH' 'ROOT'
    if [ -d "/usr/local/tomcat" ]; then
      export AS_PATH=/usr/local/tomcat
    else
      export AS_PATH=/var/lib/jetty
    fi
    echo "Path: ${AS_PATH}"

    # Currently database preferences are replaced on hibernate (XML) file. 
    # To prevent errors with special XML chars, replace all for respective encoded alternative. 
    escapeXML() {
      echo "$1" | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/"/\&quot;/g' -e "s/'/\&apos;/g"
    }
    if [[ -n "$DB_PASSWORD" ]]; then
      export DB_PASSWORD=$(escapeXML $DB_PASSWORD)
    fi
    if [[ -n "$JDBC_PARAMS" ]]; then
      export JDBC_PARAMS=$(escapeXML $JDBC_PARAMS)
    fi

    # Setup all default actions from first start
    first_start
    ## 
    # On future versions, when LTS start have this method we can remove this from this script. 
    # This method was requested on: https://github.com/xwiki/xwiki-docker/pull/36
    ## 
    function xwiki_replace_or_add() {
      local file_path="$1"
      local setting="$2"
      local new_value="$3"

      # Check if the setting exists in the file
      if grep -Eq "^ *#? *$setting=" "$file_path"; then
        # If the setting exists, replace the occurrence with the new value
        sed -i 's|^\( *#\? *\)'"$setting"'=.*$|'"$setting"'='"$new_value"'|g' "$file_path"
      else
        # If the setting doesn't exist, add it at the end of the file
        echo "$setting=$new_value" >> "$file_path"
      fi
    }

    # Add URL for Solr Remote instance
    # Backward compatibility for old image
    {{- if .Values.solr.enabled }}
    # Remove SOLR variables (will be overriden)
    INDEX_PORT=""
    INDEX_HOST=""
    echo "Adding SOLR_URL to xwiki.properties: ${SOLR_URL}"
    xwiki_replace_or_add /usr/local/xwiki/data/xwiki.properties "solr.type" "remote"
    xwiki_replace_or_add /usr/local/xwiki/data/xwiki.properties "solr.remote.baseURL" "${SOLR_BASEURL}"
    {{- end }}

    # Replace all values from keys defineded on customConfigs
    # If we detect extension, we loop over the array and add them
    {{- range $file, $values := .Values.customConfigs }}
      {{- range $key, $value := $values }}
        {{ if eq (toString $key) "extension.repositories" }}
          {{- range $property := $value }}
            if [ "${alreadyAddExtensionRepo}" == "true" ]; then
              echo '{{ $key }}={{ $property }}' >> /usr/local/xwiki/data/{{ $file }}
            else
              xwiki_replace_or_add "/usr/local/xwiki/data/{{ $file }}" '{{ $key }}' '{{ $property }}'
              alreadyAddExtensionRepo="true"
            fi
          {{- end }}
        {{ else }}
          xwiki_replace_or_add "/usr/local/xwiki/data/{{ $file }}" '{{ $key }}' '{{ $value }}'
        {{- end }}
      {{- end }}
    {{- end }}

    # Replace all values from keys defined on customConfigsSecrets
    {{- range $file, $values := .Values.customConfigsSecrets }}
      {{- range $key, $_ := $values }}
    xwiki_replace_or_add "/usr/local/xwiki/data/{{ $file }}" '{{ $key }}' '{{ regexReplaceAll "\\W+" $key "_" | upper }}'
      {{- end }}
    {{- end }}

    # Set secret Java options from javaOptsSecrets
    {{- range $key, $values := .Values.javaOptsSecrets }}
    export JAVA_OPTS=" {{- index $values "option" -}} {{ regexReplaceAll "\\W+" $key "_" | upper }} ${JAVA_OPTS}"
    {{- end }}

    {{- if .Values.customJavaAgent }}
      export JAVA_OPTS=" -javaagent:{{ .Values.customJavaAgent }} ${JAVA_OPTS}"
    {{- else if .Values.glowroot.enabled }}
    mkdir -p /usr/local/xwiki/data/glowroot
    GLOWROOT_VERSION={{ .Values.glowroot.version | quote }}
    if ! [ -d "/usr/local/xwiki/data/glowroot/glowroot-${GLOWROOT_VERSION}" ]; then
      wget -O  /tmp/glowroot-${GLOWROOT_VERSION}-dist.zip {{ .Values.glowroot.url }}
      unzip /tmp/glowroot-${GLOWROOT_VERSION}-dist.zip -d /usr/local/xwiki/data/glowroot/
      rm -f /tmp/glowroot-${GLOWROOT_VERSION}-dist.zip
      mv /usr/local/xwiki/data/glowroot/glowroot /usr/local/xwiki/data/glowroot/glowroot-${GLOWROOT_VERSION}
    fi
    cp /configmaps/glowroot.properties /usr/local/xwiki/data/glowroot/glowroot-${GLOWROOT_VERSION}/glowroot.properties
    # Append first to enable user override agent.
    export JAVA_OPTS=" -javaagent:/usr/local/xwiki/data/glowroot/glowroot-${GLOWROOT_VERSION}/glowroot.jar ${JAVA_OPTS}"
    {{- else if .Values.prometheus.javaagent.enabled }}
      PROMETHEUS_JAVAAGENT_VERSION={{ .Values.prometheus.javaagent.version }}
      if ! [ -f "/usr/local/xwiki/data/prometheus/jmx_javaagent-${PROMETHEUS_JAVAAGENT_VERSION}.jar" ]; then
        mkdir -p /usr/local/xwiki/data/prometheus/ 
        wget -O /usr/local/xwiki/data/prometheus/jmx_javaagent-${PROMETHEUS_JAVAAGENT_VERSION}.jar {{ .Values.prometheus.javaagent.url }}
      fi
      export JAVA_OPTS=" -javaagent:/usr/local/xwiki/data/prometheus/jmx_javaagent-${PROMETHEUS_JAVAAGENT_VERSION}.jar={{ .Values.prometheus.javaagent.port }}:/configmaps/javaagentConfig.yaml ${JAVA_OPTS}"
    {{- end }}

    {{- if .Values.logback.enabled }}
    cp /configmaps/logback.xml $AS_PATH/webapps/${CONTEXT_PATH}/WEB-INF/classes/logback.xml
    {{- end }}

    {{- if .Values.infinispan.enabled }}
    cp /configmaps/infinispanConfig.xml $AS_PATH/webapps/${CONTEXT_PATH}/WEB-INF/cache/infinispan/config.xml
    {{- end }}

    # Replace the platform provenance to keep track of the image
    sed -i 's/<id>org.xwiki.platform:xwiki-platform-distribution-war/<id>org.xwiki.contrib:xwiki-platform-distribution-helm-docker/' \
      $AS_PATH/webapps/${CONTEXT_PATH}/META-INF/extension.xed
    sed -i 's/<id>org.xwiki.platform:xwiki-platform-distribution-docker/<id>org.xwiki.contrib:xwiki-platform-distribution-helm-docker/' \
      $AS_PATH/webapps/${CONTEXT_PATH}/META-INF/extension.xed

    {{- if (.Values.cluster.enabled) }}
      mkdir -p /usr/local/xwiki/data/jgroups 
      KUBEPING_VERSION="{{ .Values.cluster.jgroups.kube_ping.version }}"
      KUBEPING_URL={{ .Values.cluster.jgroups.kube_ping.url }}
      KUBEPING_FILENAME=$(basename $KUBEPING_URL)
      echo "Version ${KUBEPING_VERSION} URL: ${KUBEPING_URL} File: ${KUBEPING_FILENAME}"
      if ! [ -f "/usr/local/xwiki/data/jgroups/${KUBEPING_FILENAME}" ]; then 
        curl -L "${KUBEPING_URL}" -o "/usr/local/xwiki/data/jgroups/${KUBEPING_FILENAME}"
      fi
      cp /usr/local/xwiki/data/jgroups/${KUBEPING_FILENAME} $AS_PATH/webapps/${CONTEXT_PATH}/WEB-INF/lib/
      cp /configmaps/kubeping.xml $AS_PATH/webapps/${CONTEXT_PATH}/WEB-INF/observation/remote/jgroups/kubeping.xml 
      
      xwiki_replace_or_add /usr/local/xwiki/data/xwiki.properties "observation.remote.enabled" "true"
      xwiki_replace_or_add /usr/local/xwiki/data/xwiki.properties "observation.remote.channels" "kubeping"
    {{- end }}

    if [ -d "/var/lib/jetty" ]; then
      echo "" > start.d/xwiki.ini 
      {{- range $prop, $value := .Values.properties }}
        echo '-D{{ $prop }}={{ $value }}' >> start.d/xwiki.ini 
      {{- end }}
      export JAVA_OPTIONS="${JAVA_OPTS}"
    else 
      if (/usr/local/tomcat/bin/version.sh | grep -q 'Tomcat/8'); then
        echo "Old Tomcat don't support java_opts file... Using normal props."
        {{- range $prop, $value := .Values.properties }}
          export JAVA_OPTS="${JAVA_OPTS} -D{{ $prop }}={{ $value }}"
        {{- end }}
      else 
        ## Clear contents of /tmp/java_opts.txt so that we don't add extra arguments at each pod restart.
        echo "" > /tmp/java_opts.txt
        {{- range $prop, $value := .Values.properties }}
          echo '-D{{ $prop }}="{{ $value }}"' >> /tmp/java_opts.txt
        {{- end }}
        export JAVA_OPTS="${JAVA_OPTS} @/tmp/java_opts.txt"
      fi
    fi 

    exec /usr/local/bin/docker-entrypoint.sh xwiki
