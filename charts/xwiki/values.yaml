# Default values for node.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
cluster:
  enabled: false
  replicas: 1
  jgroups:
    port: 7800
    kube_ping:
      version: "2.0.1.Final"
      url: "https://nexus.xwiki.org/nexus/service/local/repositories/central/content/org/jgroups/kubernetes/jgroups-kubernetes/${KUBEPING_VERSION}/jgroups-kubernetes-${KUBEPING_VERSION}.jar"

commonAnnotations: {}

image:
  name: xwiki
  pullPolicy: IfNotPresent
## Image Tag useful when externalDB is been used
  tag: ''
service:
  annotations: {}
  portName: node
  name: http
  type: ClusterIP
  externalPort: 80
  internalPort: 8080
  # Set an array of externalIPs for the service
  externalIPs: []
    # - 10.20.30.40
    # - 10.20.30.41
  # Reference: https://kubernetes.io/docs/reference/networking/virtual-ips/#session-affinity
  sessionAffinity: ClientIP
serviceAccount:
  annotations: {}
resources: {}
#  limits:
#    cpu: 2000m
#    memory: 2000Mi
#  requests:
#    cpu: 500m
#    memory: 768Mi

javaOpts: []
#  - "-Xmx1024m"
extraEnvVars: []
#  - name: FOO
#    value: "bar"

# Optionally specify an extra list of additional volumes.
extraVolumes: []

# Optionally specify an extra list of additional volumeMounts.
extraVolumeMounts: []

# Enable to choose witch kind of workload will be used: (true) StatefulSet or (false) for Deployment
workloadStateful: true

securityContext:
  enabled: false
  fsGroup: 101

containerSecurityContext:
  enabled: false
  runAsUser: 100
  runAsNonRoot: true
  seccompProfile:
    type: "RuntimeDefault"

volumePermissions:
  containerSecurityContext:
    enabled: true
    runAsUser: 0
    seccompProfile:
      type: "RuntimeDefault"
  enabled: false

##
## MySql chart configuration
##
## https://github.com/bitnami/charts/tree/main/bitnami/mysql
##
mysql:
 ## Whether to deploy a mysql server. Set false for a different database.
  enabled: true
  auth:
    rootPassword: "xwiki"
    username: "xwiki"
    password: "xwiki"
    database: "xwiki"
  initdbScripts:
    00-init.sql: |
      grant all privileges on *.* to xwiki@'%'
  primary:
    # Changed to use UTF8mb4, check future versions if this was already changed.
    # TODO: review explicit_defaults_for_timestamp
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8MB4
      collation-server=utf8mb4_0900_ai_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8MB4
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

##
## MariaDB chart configuration
##
## https://github.com/bitnami/charts/tree/main/bitnami/mariadb
##
mariadb:
 ## Whether to deploy a mysql server. Set false for a different database.
  enabled: false
  auth:
    rootPassword: "xwiki"
    username: "xwiki"
    password: "xwiki"
    database: "xwiki"
  initdbScripts:
    00-init.sql: |
      grant all privileges on *.* to xwiki@'%'
    # Changed to use UTF8mb4, check future versions if this was already changed.
    # TODO: review explicit_defaults_for_timestamp
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      plugin_dir=/opt/bitnami/mariadb/plugin
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8MB4
      collation-server=utf8mb4_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8MB4
      plugin_dir=/opt/bitnami/mariadb/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
##
## PostgreSQL chart configuration
##
## https://github.com/helm/charts/tree/master/stable/postgresql
##
postgresql:
 ## Whether to deploy a postgresql server. Set false for a different database.
  enabled: false
  auth:
    postgresPassword: "xwiki"
    username: "xwiki"
    password: "xwiki"
    database: "xwiki"
  # persistence:
  #  size: 8Gi

##
## For custom mysql and postgres database. Use externalDB.
## Would be used only if postgres and mysql is disabled.
## Set the image tag if want to use externalDB
##
externalDB:
  password: ''
  user: ''
  database: ''
  host: ''
  # To set if database init containers are enabled, supported values are mysql, postgresql, mariadb
  type: ''
  # If set to true default secret will not be created, use custom secret
  customKeyRef:
    enabled: false
    name: ''
    key: ''

##
## To use external solr enable solr, provide host and port
##
solr:
  # If set to false mount an internal Solr instance
  enabled: false
  replicaCount: 1
  image: gridexx/xwiki:solr8
  extraEnvVars: []
    # - name: FOO
    #   value: "bar"
  resources: {}
  service:
    annotations: {}
    portName: solr-node
    name: http
    type: ClusterIP
    externalPort: 8983
    internalPort: 8983
    sessionAffinity: ClientIP
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: "500Mi"
    annotations: {}
    labels: {}
    selector: {}
    dataSource: {}
  podAnnotations: {}
  nodeSelector: {}
  affinity: {}
  tolerations: {}

# To use ingress for routing set ingress.enabled value to true and istio.enabled value to false
ingress:
  enabled: false
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/session-cookie-name: XNGINX
    nginx.ingress.kubernetes.io/session-cookie-expires: "1800"
    # kubernetes.io/tls-acme: "true"
    # ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: ""
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: secret-tls
  #    hosts:
  #      - xwiki.local

# To use istio for routing set istio.enabled value to true and ingress.enabled value to false
istio:
  enabled: false
  host: "*"
  httpCookie:
    name: xistio
    path: /
    ttl: 1800s
  externalGatewayName: ""
  gateway:
    enabled: false
    # `ingress` is used on new helm intalls, otherwise use `ingressgateway`
    selectorIstio: ingress
  tls:
    enabled: false
    httpsRedirect: true
    secretName: ""
    minProtocolVersion: "TLSV1_2"
    mode: "SIMPLE"
    certificate:
      # Generate certificate (cert-manager)
      enabled: false
      namespace: istio-ingress
      issuerRef: {}
      #  name: issuer
      #  kind: ClusterIssuer


persistence:
  enabled: true
  existingClaim: ""
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: "500Mi"
  annotations: {}
  labels: {}
  selector: {}
  dataSource: {}

## Read about PostDistribution budget at https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
## Use only on a clustered setup
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Reference: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/#create-a-pod-that-gets-scheduled-to-your-chosen-node
nodeSelector: {}

# Reference: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"

# https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: kubernetes.io/e2e-az-name
  #         operator: In
  #         values:
  #         - e2e-az1
  #         - e2e-az2

# Credentials to fetch images from private registry.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
# imagePullSecrets:
#   - "docker-registry"
#
imagePullSecrets: []


# Custom configuration files for xwiki
customConfigs:
  # Properties key that exists, replace in line is done with value here defined.
  # If key don't exists, this key and value will be appended in that specific file.
  # This files are list of key: value that are translated as key=value in that file.
  # xwiki.cfg:
    #
  # xwiki.properties:
    #

# Properties to be passed to Java process with -D parameters using JAVA_OPTS
properties:
  # "key": "value"

# Init containers for the xwiki deployment/statefullSet
initContainers:
  database:
    enabled: false
    # Custom command to be executed in the init container
    # command: ''
    # To set when using externalDB
    # image: "mysql:latest"
    containerSecurityContext:
      enabled: false
      runAsUser: 0
      seccompProfile:
        type: "RuntimeDefault"
  solr:
    enabled: false
    containerSecurityContext:
      enabled: false
      runAsUser: 0
      seccompProfile:
        type: "RuntimeDefault"

glowroot:
  enabled: false
  version: 0.14.0
  url: https://github.com/glowroot/glowroot/releases/download/v${GLOWROOT_VERSION}/glowroot-${GLOWROOT_VERSION}-dist.zip
  properties:
    data.dir: /usr/local/xwiki/data/glowroot/data
    log.dir: /usr/local/xwiki/data/glowroot/log
    tmp.dir: /usr/local/xwiki/data/glowroot/tmp

logback:
  enabled: false
#  customConfiguration: |
#    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
#      <!-- Direct log messages to stdout -->
#      <Target>System.out</Target>
#      <encoder>
#        <pattern>%d [%t] %-5p %-30.30c{2} - %m %n</pattern>
#      </encoder>
#    </appender>
#  extraConfiguration: |
#    <logger name="org.xwiki" level="debug"/>
#    <logger name="com.xwiki" level="debug"/>

# Enable Autoscaling for the xwiki deployment/statefullSet:
# https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  # Custom metrics to trigger the Autoscaling
  # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#autoscaling-on-multiple-metrics-and-custom-metrics
  metrics: {}
  # - type: Resource
  #   resource:
  #     name: cpu
  #     target:
  #       type: Utilization
  #       averageUtilization: 50
  status: {}
  # observedGeneration: 1
  # lastScaleTime: <some-time>
  # currentReplicas: 1
  # desiredReplicas: 1
  # currentMetrics:
  # - type: Resource
  #   resource:
  #     name: cpu
  #     current:
  #       averageUtilization: 0
  #       averageValue: 0

# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
probes:
  startup:
    enabled: true
    httpGet:
      enabled: false
      path: /
    initialDelaySeconds: 120
    timeoutSeconds: 60
    periodSeconds: 30
    failureThreshold: 5
    successThreshold: 1
  liveness:
    enabled: true
    httpGet:
      enabled: true
      path: /rest
    initialDelaySeconds: 30
    timeoutSeconds: 3
    periodSeconds: 30
    # 5 minutes
    failureThreshold: 10
    successThreshold: 1
  readiness:
    enabled: true
    httpGet:
      enabled: true
      path: /rest/wikis/xwiki/spaces
    initialDelaySeconds: 30
    timeoutSeconds: 3
    periodSeconds: 30
    # 5 minutes
    failureThreshold: 10
    successThreshold: 1

infinispan:
  enabled: false
  customConfig: ""
  defaultMemoryMaxCount: 10000

prometheus:
  javaagent:
    # https://github.com/prometheus/jmx_exporter
    # Enable to download and use this agent
    enabled: false
    port: 12345
    version: 0.20.0
    url: https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/${PROMETHEUS_JAVAAGENT_VERSION}/jmx_prometheus_javaagent-${PROMETHEUS_JAVAAGENT_VERSION}.jar
    config: |
      rules:
      - pattern: ".*"
  podmonitor:
    enabled: true
    labels: {}
